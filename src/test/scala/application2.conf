akka {
	event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
	loglevel = DEBUG
}

akka {
	actor {
		provider = "akka.remote.RemoteActorRefProvider"
	}
	remote {
		transport = "akka.remote.netty.NettyRemoteTransport"
		netty {
			hostname = "127.0.0.1"
			port = 2552
		}
	}
}

akka.actor.deployment {
	/myrouter1 {
		router = round-robin
		nr-of-instances = 5
	}
}

akka.actor.deployment {
	/myrouter3 {
		router = random
		nr-of-instances = 5
	}
}

akka.actor.deployment {
	/myrouter4 {
		router = smallest-mailbox
		nr-of-instances = 5
	}
}

akka.actor.deployment {
	/myrouter5 {
		router = broadcast
		nr-of-instances = 5
	}
}

akka.actor.deployment {
	/myrouter6 {
		router = scatter-gather
		nr-of-instances = 5
		within = 10 seconds
	}
}

akka.actor.deployment {
	/myrouter7 {
		router = consistent-hashing
		nr-of-instances = 5
		virtual-nodes-factor = 10
	}
}

akka.actor.deployment {
	/myrouter2 {
		router = round-robin
		resizer {
			lower-bound = 2
			upper-bound = 15
		}
	}
}

prio-dispatcher {
	mailbox-type = "misty.practices.akka.dispatchers.MyPrioMailbox"
}

my-dispatcher {
	# Dispatcher 是基于事件的派发器的名称
	type = Dispatcher
	# 使用何种ExecutionService
	executor = "fork-join-executor"
	# 配置 fork join 池
	fork-join-executor {
		# 容纳基于倍数的并行数量的线程数下限
		parallelism-min = 2
		#并行数（线程） ... ceil(可用CPU数＊倍数）
		parallelism-factor = 2.0
		#容纳基于倍数的并行数量的线程数上限
		parallelism-max = 10
	}
	# Throughput 定义了线程切换到另一个actor之前处理的消息数上限
	# 设置成1表示尽可能公平.
	throughput = 100
}

my-thread-pool-dispatcher {
	# Dispatcher是基于事件的派发器的名称
	type = Dispatcher
	# 使用何种 ExecutionService
	executor = "thread-pool-executor"
	#配置线程池
	thread-pool-executor {
		#容纳基于倍数的并行数量的线程数下限
		core-pool-size-min = 2
		# 核心线程数 .. ceil(可用CPU数＊倍数）
		core-pool-size-factor = 2.0
		#容纳基于倍数的并行数量的线程数上限
		core-pool-size-max = 10
	}
	#Throughput 定义了线程切换到另一个actor之前处理的消息数上限
	# processed per actor before the thread jumps to the next actor.
	# 设置成1表示尽可能公平.
	throughput = 100
}
